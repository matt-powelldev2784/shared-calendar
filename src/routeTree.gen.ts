/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ViewEntryImport } from './routes/view-entry'
import { Route as SignoutImport } from './routes/signout'
import { Route as ReviewPendingEntryImport } from './routes/review-pending-entry'
import { Route as GetCalendarImport } from './routes/get-calendar'
import { Route as ErrorImport } from './routes/error'
import { Route as EditEntryImport } from './routes/edit-entry'
import { Route as AuthenticatedImport } from './routes/authenticated'
import { Route as AddEntryImport } from './routes/add-entry'
import { Route as AddCalendarImport } from './routes/add-calendar'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ViewEntryRoute = ViewEntryImport.update({
  id: '/view-entry',
  path: '/view-entry',
  getParentRoute: () => rootRoute,
} as any)

const SignoutRoute = SignoutImport.update({
  id: '/signout',
  path: '/signout',
  getParentRoute: () => rootRoute,
} as any)

const ReviewPendingEntryRoute = ReviewPendingEntryImport.update({
  id: '/review-pending-entry',
  path: '/review-pending-entry',
  getParentRoute: () => rootRoute,
} as any)

const GetCalendarRoute = GetCalendarImport.update({
  id: '/get-calendar',
  path: '/get-calendar',
  getParentRoute: () => rootRoute,
} as any)

const ErrorRoute = ErrorImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRoute,
} as any)

const EditEntryRoute = EditEntryImport.update({
  id: '/edit-entry',
  path: '/edit-entry',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/authenticated',
  path: '/authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AddEntryRoute = AddEntryImport.update({
  id: '/add-entry',
  path: '/add-entry',
  getParentRoute: () => rootRoute,
} as any)

const AddCalendarRoute = AddCalendarImport.update({
  id: '/add-calendar',
  path: '/add-calendar',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/add-calendar': {
      id: '/add-calendar'
      path: '/add-calendar'
      fullPath: '/add-calendar'
      preLoaderRoute: typeof AddCalendarImport
      parentRoute: typeof rootRoute
    }
    '/add-entry': {
      id: '/add-entry'
      path: '/add-entry'
      fullPath: '/add-entry'
      preLoaderRoute: typeof AddEntryImport
      parentRoute: typeof rootRoute
    }
    '/authenticated': {
      id: '/authenticated'
      path: '/authenticated'
      fullPath: '/authenticated'
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/edit-entry': {
      id: '/edit-entry'
      path: '/edit-entry'
      fullPath: '/edit-entry'
      preLoaderRoute: typeof EditEntryImport
      parentRoute: typeof rootRoute
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorImport
      parentRoute: typeof rootRoute
    }
    '/get-calendar': {
      id: '/get-calendar'
      path: '/get-calendar'
      fullPath: '/get-calendar'
      preLoaderRoute: typeof GetCalendarImport
      parentRoute: typeof rootRoute
    }
    '/review-pending-entry': {
      id: '/review-pending-entry'
      path: '/review-pending-entry'
      fullPath: '/review-pending-entry'
      preLoaderRoute: typeof ReviewPendingEntryImport
      parentRoute: typeof rootRoute
    }
    '/signout': {
      id: '/signout'
      path: '/signout'
      fullPath: '/signout'
      preLoaderRoute: typeof SignoutImport
      parentRoute: typeof rootRoute
    }
    '/view-entry': {
      id: '/view-entry'
      path: '/view-entry'
      fullPath: '/view-entry'
      preLoaderRoute: typeof ViewEntryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-calendar': typeof AddCalendarRoute
  '/add-entry': typeof AddEntryRoute
  '/authenticated': typeof AuthenticatedRoute
  '/edit-entry': typeof EditEntryRoute
  '/error': typeof ErrorRoute
  '/get-calendar': typeof GetCalendarRoute
  '/review-pending-entry': typeof ReviewPendingEntryRoute
  '/signout': typeof SignoutRoute
  '/view-entry': typeof ViewEntryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-calendar': typeof AddCalendarRoute
  '/add-entry': typeof AddEntryRoute
  '/authenticated': typeof AuthenticatedRoute
  '/edit-entry': typeof EditEntryRoute
  '/error': typeof ErrorRoute
  '/get-calendar': typeof GetCalendarRoute
  '/review-pending-entry': typeof ReviewPendingEntryRoute
  '/signout': typeof SignoutRoute
  '/view-entry': typeof ViewEntryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/add-calendar': typeof AddCalendarRoute
  '/add-entry': typeof AddEntryRoute
  '/authenticated': typeof AuthenticatedRoute
  '/edit-entry': typeof EditEntryRoute
  '/error': typeof ErrorRoute
  '/get-calendar': typeof GetCalendarRoute
  '/review-pending-entry': typeof ReviewPendingEntryRoute
  '/signout': typeof SignoutRoute
  '/view-entry': typeof ViewEntryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add-calendar'
    | '/add-entry'
    | '/authenticated'
    | '/edit-entry'
    | '/error'
    | '/get-calendar'
    | '/review-pending-entry'
    | '/signout'
    | '/view-entry'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/add-calendar'
    | '/add-entry'
    | '/authenticated'
    | '/edit-entry'
    | '/error'
    | '/get-calendar'
    | '/review-pending-entry'
    | '/signout'
    | '/view-entry'
  id:
    | '__root__'
    | '/'
    | '/add-calendar'
    | '/add-entry'
    | '/authenticated'
    | '/edit-entry'
    | '/error'
    | '/get-calendar'
    | '/review-pending-entry'
    | '/signout'
    | '/view-entry'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddCalendarRoute: typeof AddCalendarRoute
  AddEntryRoute: typeof AddEntryRoute
  AuthenticatedRoute: typeof AuthenticatedRoute
  EditEntryRoute: typeof EditEntryRoute
  ErrorRoute: typeof ErrorRoute
  GetCalendarRoute: typeof GetCalendarRoute
  ReviewPendingEntryRoute: typeof ReviewPendingEntryRoute
  SignoutRoute: typeof SignoutRoute
  ViewEntryRoute: typeof ViewEntryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddCalendarRoute: AddCalendarRoute,
  AddEntryRoute: AddEntryRoute,
  AuthenticatedRoute: AuthenticatedRoute,
  EditEntryRoute: EditEntryRoute,
  ErrorRoute: ErrorRoute,
  GetCalendarRoute: GetCalendarRoute,
  ReviewPendingEntryRoute: ReviewPendingEntryRoute,
  SignoutRoute: SignoutRoute,
  ViewEntryRoute: ViewEntryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/add-calendar",
        "/add-entry",
        "/authenticated",
        "/edit-entry",
        "/error",
        "/get-calendar",
        "/review-pending-entry",
        "/signout",
        "/view-entry"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/add-calendar": {
      "filePath": "add-calendar.tsx"
    },
    "/add-entry": {
      "filePath": "add-entry.tsx"
    },
    "/authenticated": {
      "filePath": "authenticated.tsx"
    },
    "/edit-entry": {
      "filePath": "edit-entry.tsx"
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/get-calendar": {
      "filePath": "get-calendar.tsx"
    },
    "/review-pending-entry": {
      "filePath": "review-pending-entry.tsx"
    },
    "/signout": {
      "filePath": "signout.tsx"
    },
    "/view-entry": {
      "filePath": "view-entry.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
